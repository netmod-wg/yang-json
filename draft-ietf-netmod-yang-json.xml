<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM '.tools/schema/rfc2629.dtd' [
<!ENTITY % COMMON SYSTEM ".tools/bplate/common.ent">
%COMMON;
<!ENTITY % WG SYSTEM ".tools/bplate/ietf-wg.ent">
%WG;
<!ENTITY % stdrefs SYSTEM "stdrefs.ent">
%stdrefs;
<!ENTITY % figures SYSTEM "figures.ent">
%figures;
]>

<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std">

  <front>
    <title abbrev="JSON Encoding of YANG Data">JSON Encoding of Data
    Modeled with YANG</title>

    <author initials="L." surname="Lhotka" fullname="Ladislav Lhotka">
      <organization>CZ.NIC</organization>
      <address>
        <email>lhotka@nic.cz</email>
      </address>
    </author>
    <date day="23" month="September" year="2013"/>
    <area>Operations and Management</area>
    &netmod-wg;
    <abstract>
      <t>This document defines encoding rules for representing
      configuration, state data, RPC input and output parameters, and
      notifications defined using YANG as JavaScript Object Notation
      (JSON) text.</t>
    </abstract>
  </front>

  <middle>

    <section anchor="sec.introduction" title="Introduction">
      <t>The NETCONF protocol <xref target="RFC6241"/> uses XML <xref
      target="W3C.REC-xml-20081126"/> for encoding data in its Content
      Layer. Other management protocols might want to use other
      encodings while still benefiting from using YANG <xref
      target="RFC6020"/> as the data modeling language.</t>
      <t>For example, the RESTCONF protocol <xref
      target="I-D.ietf-netconf-restconf"/> supports two encodings: XML
      (media type "application/yang.data+xml") and JSON (media type
      "application/yang.data+json).</t>
      <t>The specification of the YANG data modelling language <xref
      target="RFC6020"/> defines only XML encoding for data instances,
      i.e. contents of configuration datastores, state data, RFC input
      and output parameters, and event notifications. The aim of this
      document is to define rules for encoding the same data as
      JavaScript Object Notation (JSON) text <xref
      target="RFC7159"/>.</t>
      <t>In order to achieve maximum interoperability while allowing
      implementations to use a variety of available JSON parsers, the
      JSON encoding rules follow, as much as possible, the constraints
      of the I-JSON restricted profile <xref
      target="I-D.ietf-json-i-json"/>. <xref
      target="sec.i-json"/> discusses I-JSON conformance in more
      detail.</t>
    </section>

    <section anchor="sec.term-not" title="Terminology and Notation">
      
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
      in this document are to be interpreted as described in <xref
      target="RFC2119"/>.</t>

      <t>The following terms are defined in <xref target="RFC6020"/>:
      <list style="symbols">
        <t>anyxml</t>
        <t>augment</t>
        <t>container</t>
        <t>data node</t>
        <t>identity</t>
        <t>instance identifier</t>
        <t>leaf</t>
        <t>leaf-list</t>
        <t>list</t>
        <t>module</t>
        <t>submodule</t>
      </list></t>

    </section>

    <section anchor="sec.valid" title="Validation of JSON-encoded
                                       Instance Data">
      <t>Instance data validation as defined in <xref
      target="RFC6020"/> is only applicable to XML-encoded data. For
      one, semantic constraints in "must" statements are expressed
      using XPath 1.0 <xref target="W3C.REC-xpath-19991116"/>, which
      can be properly interpreted only in the XML context.</t>
      <t>This document and the corresponding "XML Mapping Rules"
      sections from <xref target="RFC6020"/> also define an implicit
      schema-driven mapping of JSON-encoded instances to XML-encoded
      instances (and vice versa). This mapping is mostly
      straightforward. In cases where doubts could arise, this
      document gives explicit instructions for mapping JSON-encoded
      instances to XML.</t>
      <t>In order to validate a JSON instance document, it MUST first be
      mapped, at least conceptually, to the corresponding XML instance
      document. By definition, the JSON document is then valid if and
      only if the XML document is valid according to the rules stated in
      <xref target="RFC6020"/>.</t>
    </section>

    <section anchor="sec.names-ns" title="Names and Namespaces">
      <t>Instances of YANG data nodes (leafs, containers, leaf-lists,
      lists and anyxml nodes) are always encoded as members of a JSON
      object, i.e., as name/value pairs. This section defines how the
      name part is formed, and the following sections deal with the
      value part.</t>
      <t>Except in the cases specified below, the member name is
      identical to the identifier of the corresponding YANG data
      node. Every such name belongs to a namespace which is associated
      with the YANG module where the corresponding data node is
      defined. If the data node is defined in a submodule, then the
      namespace is determined by the main module to which the
      submodule belongs.</t>
      <t>If the namespace of a member name has to be explicitly
      specified, the module name SHALL be used as a prefix to the
      (local) member name. Both parts of the member name SHALL be
      separated with a colon character (":"). In other words, the
      namespace-qualified name will have the following form:</t>

      <figure anchor="fig.ns-enc"
              title="Encoding a namespace identifier with a local name.">
        <artwork>
        <![CDATA[<module name>:<local name>]]>
        </artwork>
      </figure>

      <t>Names with namespace identifiers in the form shown in <xref
      target="fig.ns-enc"/> are used if and only if the parent data
      node belongs to a different namespace, which also includes all
      top-level YANG data nodes.</t>
      <t>For example, consider the following YANG module:
      <figure>
        &foomod.yang;
      </figure></t>
      <t>If the data model consists only of this module, then the
      following is a valid JSON-encoded configuration:
      <figure>
        <artwork>
<![CDATA[{
  "foomod:top": {
    "foo": 54
  }
}]]>
        </artwork>
      </figure>
      </t>
      <t>Note that the top-level container instance contains the
      namespace identifier (module name) but the "foo" leaf doesn't
      because it is defined in the same module as its parent container.</t>
      <t>Now, assume the container "top" is augmented from another
      module, "barmod":
      <figure>
        &barmod.yang;
      </figure>
      </t>
      <t>A valid JSON-encoded configuration containing both leafs may
      then look like this:
      <figure>
        <artwork>
<![CDATA[{
  "foomod:top": {
    "foo": 54,
    "barmod:bar": true
  }
}]]>
        </artwork>
      </figure>
      </t>
      <t>The name of the "bar" leaf is prefixed with the namespace
      identifier because its parent is defined in a different module,
      hence it belongs to another namespace.</t>
      <t>Explicit namespace identifiers are sometimes needed when
      encoding values of the "identityref" and "instances-identifier"
      types. The same form as shown in <xref target="fig.ns-enc"/> is
      then used as well. See Sections <xref format="counter"
      target="sec.idref"/> and <xref format="counter"
      target="sec.i-i"/> for details.</t>
    </section>

    <section anchor="sec.datanodes"
             title="Encoding of YANG Data Node Instances">

      <t>Every complete JSON instance document, such as a
      configuration datastore content, is an object. Its members are
      instances of all top-level data nodes defined by the YANG data
      model.</t>
      <t>Character encoding MUST be UTF-8.</t>
      <t>Any data node instance is encoded as a name/value pair where
      the name is formed from the data node identifier using the rules
      of <xref target="sec.names-ns"/>. The value depends on the
      category of the data node as explained in the following
      subsections.</t>

      <section anchor="sec.leaf"
               title='The "leaf" Data Node'>

        <t>A leaf instance is encoded as a name/value pair where the
        value can be a string, number, literal "true" or "false", or
        the special array "[null]", depending on the type of the leaf
        (see <xref target="sec.datatypes"/> for the type encoding
        rules).</t>
        <t>Example: For the leaf node definition
        <figure>
          <artwork>
<![CDATA[leaf foo {
  type uint8;
}]]>
          </artwork>
        </figure>
        the following is a valid JSON-encoded instance:
        <figure>
          <artwork>
<![CDATA["foo": 123]]>
          </artwork>
        </figure>
        </t>

      </section>

      <section anchor="sec.container"
               title='The "container" Data Node'>

        <t>An container instance is
        encoded as a name/object pair. The container's child data
        nodes are encoded as members of the object.</t>
        <t>Example: For the container definition
        <figure>
          <artwork>
<![CDATA[container bar {
  leaf foo {
    type uint8;
  }
}]]>
          </artwork>
        </figure>
        the following is a valid instance:
        <figure>
          <artwork>
<![CDATA["bar": {
  "foo": 123
}]]>
          </artwork>
        </figure>
        </t>
      </section>

      <section anchor="sec.leaf-list"
               title='The "leaf-list" Data Node'>

        <t>A leaf-list is encoded as a name/array pair, and the array
        elements are values of the same type, which can be a string,
        number, literal "true" or "false", or the special array
        "[null]", depending on the type of the leaf-list (see <xref
        target="sec.datatypes"/> for the type encoding rules).</t>
	<t>The ordering of array elements follows the same rules as
	the ordering of XML elements representing leaf-list entries in
	the XML encoding. Specifically, the "ordered-by" properties
	(sec. 7.7.5 in <xref target="RFC6020"/>) MUST be observed.</t>
        <t>Example: For the leaf-list definition
        <figure>
          <artwork>
<![CDATA[leaf-list foo {
  type uint8;
}]]>
          </artwork>
        </figure>
        the following is a valid instance:
        <figure>
          <artwork>
<![CDATA["foo": [123, 0]]]>
          </artwork>
        </figure>
        </t>
      </section>

      <section anchor="sec.list"
               title='The "list" Data Node'>
        
        <t>A list instance is encoded as a name/array pair, and the
        array elements are JSON objects.</t>
	<t>The ordering of array elements follows the same rules as
	the ordering of XML elements representing list entries in the
	XML encoding. Specifically, the "ordered-by" properties
	(sec. 7.7.5 in <xref target="RFC6020"/>) MUST be observed.</t>
        <t>Unlike the XML encoding, where list keys are required to
        precede any other siblings within a list entry, and appear in
        the order specified by the data model, the order of members in
        a JSON-encoded list entry is arbitrary because JSON objects
        are fundamentally unordered collections of members.</t>
        <t>Example: For the list definition
        <figure>
          <artwork>
<![CDATA[list bar {
  key foo;
  leaf foo {
    type uint8;
  }
  leaf baz {
    type string;
  }
}]]>
          </artwork>
        </figure>
        the following is a valid instance:
        <figure>
          <artwork>
<![CDATA["bar": [
  {
    "foo": 123,
    "baz": "zig"
  },
  {
    "baz": "zag",
    "foo": 0
  }
]]]>
          </artwork>
        </figure>
        </t>

      </section>
      <section anchor="sec.anyxml"
               title='The "anyxml" Data Node'>
        <t>An anyxml instance is encoded as a name/value pair. The
        value can be of any valid JSON type, i.e. an object, array,
        number, string or one of the literals "true", "false" and
        "null".</t>
        <t>This document imposes no other restrictions on the contents
        of JSON-encoded anyxml instances. It also doesn't define any
        universal mapping between the contents of JSON- and
        XML-encoded anyxml instances - note that such a mapping is not
        needed for the purposes of validation (<xref
        target="sec.valid"/>) because anyxml contents are not subject
        to YANG-based validation (see sec. 7.10 in <xref
        target="RFC6020"/>). However, each definition of an anyxml
        node MAY specify, in its "description" statement, appropriate
        syntactic, semantic and mapping rules for the values of that
        anyxml data node.</t>
        <t>Example: For the anyxml definition
        <figure>
          <artwork>
<![CDATA[anyxml bar;]]>
          </artwork>
        </figure>
        the following is a valid instance:
        <figure>
          <artwork>
<![CDATA["bar": [true, null, true]]]>
          </artwork>
        </figure>
        </t>
      </section>

    </section>

    <section anchor="sec.datatypes"
             title="The Mapping of YANG Data Types to JSON Values">

      <t>The type of the JSON value in an instance of the leaf or
      leaf-list data node depends on the type of that data node as
      specified in the following subsections.</t>

      <section anchor="sec.numtypes" title="Numeric Types">
        <t>A value of the "int8", "int16", "int32", "uint8", "uint16"
	and "uint32" is represented as a JSON number.</t>
        <t>A value of the "int64", "uint64" or "decimal64" type is
        encoded as a JSON string whose contents is the lexical
        representation of that numeric value as specified in sections
        9.2.1 and 9.3.1 of <xref target="RFC6020"/>.</t>
        <t>For example, if the type of the leaf "foo" in <xref
        target="sec.leaf"/> was "uint64" instead of "uint8", the
        instance would have to be encoded as</t>
        <figure>
          <artwork>
<![CDATA["foo": "123"]]>
          </artwork>
        </figure>
        <t>The special handling of 64-bit numbers follows from I-JSON
        recommendation to encode numbers exceeding the IEEE 754-2008
        double precision range as strings, see sec. 2.2 in <xref
        target="I-D.ietf-json-i-json"/>.</t>
      </section>

      <section anchor="sec.string" title='The "string" Type'>
        <t>A "string" value encoded as a JSON string, subject to JSON
        string encoding rules.</t>
      </section>

      <section anchor="sec.boolean" title='The "boolean" Type'>
        <t>A "boolean" value is mapped to the corresponding JSON
        literal name "true" or "false".</t>
      </section>

      <section anchor="sec.enum" title='The "enumeration" Type'>
        <t>An "enumeration" value is mapped in the same way as a
        string except that the permitted values are defined by "enum"
        statements in YANG. See sec. 9.6 in <xref
        target="RFC6020"/>.</t>
      </section>

      <section anchor="sec.bits" title='The "bits" Type'>
        <t>A "bits" value is mapped to a JSON string identical to the
        lexical representation of this value in XML, i.e.,
        space-separated names representing the individual bit values
        that are set. See sec. 9.7 in <xref target="RFC6020"/>.</t>
      </section>

      <section anchor="sec.binary" title='The "binary" Type'>
        <t>A "binary" value is mapped to a JSON string identical to
        the lexical representation of this value in XML, i.e.,
        base64-encoded binary data. See sec. 9.8 in <xref
        target="RFC6020"/>.</t>
      </section>

      <section anchor="sec.leafref" title='The "leafref" Type'>
        <t>A "leafref" value is mapped according to the same rules as
        the type of the leaf being referred to.</t>
      </section>

      <section anchor="sec.idref" title='The "identityref" Type'>
        <t>An "identityref" value is mapped to a string representing
        the name of an identity. Its namespace MUST be expressed as
        shown in <xref target="fig.ns-enc"/> if it is different from
        the namespace of the leaf node containing the identityref
        value, and MAY be expressed otherwise.</t>
        <t>For example, consider the following schematic module:</t>
        <figure>
          <artwork>
<![CDATA[module exmod {
  ...
  import ietf-interfaces {
    prefix if;
  }
  import iana-if-type {
    prefix ianaift;
  }
  ...
  leaf type {
    type identityref {
      base "if:interface-type";
    }
  }
}]]>
          </artwork>
        </figure>
        <t>A valid instance of the "type" leaf is then encoded as
        follows:
        <figure>
          <artwork>
<![CDATA["type": "iana-if-type:ethernetCsmacd"]]>
          </artwork>
        </figure>
        </t>
        <t>The namespace identifier "iana-if-type" must be present in
        this case because the "ethernetCsmacd" identity is not defined
        in the same module as the "type" leaf.</t>
      </section>

      <section anchor="sec.empty" title='The "empty" Type'>
        <t>An "empty" value is mapped to "[null]", i.e., an array with
        the "null" literal being its only element.</t>
        <t>This encoding was chosen instead of using simply "null" in
        order to facilitate the use of empty leafs in common
        programming languages. When used in a boolean context, the
        "[null]" value, unlike "null", evaluates to true.</t>

        <t>Example: For the leaf definition
        <figure>
          <artwork>
<![CDATA[leaf foo {
  type empty;
}]]>
          </artwork>
        </figure>
        a valid instance is
        <figure>
          <artwork>
<![CDATA["foo": [null]]]>
          </artwork>
        </figure>
        </t>

      </section>

      <section anchor="sec.union" title='The "union" Type'>
        <t>A value of the "union" type is encoded as the value of any
        of the member types.</t>
        <t>Unlike XML, JSON conveys part of the type information
        already in the encoding. When validating a value of the
        "union" type, this information MUST also be taken into account.</t>
        <t>For example, consider the following YANG definition:
        <figure>
          <artwork>
<![CDATA[leaf bar {
  type union {
    type uint16;
    type string;
  }
}]]>
          </artwork>
        </figure>
        In RESTCONF <xref target="I-D.ietf-netconf-restconf"/>, it is
        fully acceptable to set the value of "bar" in the following
        way when using the "application/yang.data+xml" media type:
        <figure>
          <artwork>
<![CDATA[<bar>13.5</bar>]]>
          </artwork>
        </figure>
        because the value may be interpreted as a string, i.e., the
        second member type of the union. When using the
        "application/yang.data+json" media type, however, this is an error:
        <figure>
          <artwork>
<![CDATA["bar": 13.5]]>
          </artwork>
        </figure>
        In this case, the JSON encoding indicates the value is
        supposed to be a number rather than a string.
        </t>
      </section>

      <section anchor="sec.i-i" title='The "instance-identifier" Type'>
        <t>An "instance-identifier" value is encoded as a string that
        is analogical to the lexical representation in XML encoding,
        see sec. 9.13.3 in <xref target="RFC6020"/>. However,
	the encoding of namespaces in instance-identifier values
	follows the rules stated in <xref target="sec.names-ns"/>,
	namely:
	<list style="symbols">
	  <t>The namespace identifier is the module name where each
	  data node is defined.</t>
	  <t>The encoding of a node name with an explicit namespace is
	  as shown in <xref target="fig.ns-enc"/>.</t>
	  <t>The leftmost (top-level) node name is always prefixed
	  with the namespace identifier.</t>
	  <t>Any subsequent node name has the namespace identifier if
	  and only if its parent node has a different namespace. This
	  also holds for node names appearing in predicates.</t>
	</list></t>
	<t>For example,
	<figure>
	  <artwork>
/ietf-interfaces:interfaces/interface[name='eth0']/ietf-ip:ipv4/ip
	  </artwork>
	</figure>
	is a valid instance-identifer value because the data nodes
	"interfaces", "interface" and "name" are defined in the module
	"ietf-interfaces", whereas "ipv4" and "ip" are defined in
	"ietf-ip".</t>
        <t>When translating an instance-identifier value from JSON to
        XML, the namespace identifier (YANG module name) in each
        component of the instance-identifier MUST be replaced by an
        XML namespace prefix that is associated with the namespace URI
        reference of the module in the scope of the element containing
	the instance-identifier value.</t>
      </section>

    </section>

    <section anchor="sec.i-json" title="I-JSON Compliance">
      <t>I-JSON <xref target="I-D.ietf-json-i-json"/> is a restricted
      profile of JSON that guarantees maximum interoperability for
      protocols that use JSON in their messages, no matter what JSON
      encoders/decoders are used in protocol implementations. The
      encoding defined in this document therefore observes the I-JSON
      requirements and recommendations as closely as possible.</t>
      <t>In particular, the following properties are guaranteed:
      <list style="symbols">
        <t>Character encoding is UTF-8.</t>
        <t>Member names within the same JSON object are always unique.</t>
        <t>The order of JSON object members is never relied upon.</t>
        <t>Numbers of any type supported by YANG can be exchanged
        reliably. See <xref target="sec.numtypes"/> for details.</t>
      </list>
      </t>
      <t>The only two cases where a JSON instance document encoded
      according to this document may deviate from I-JSON were dictated
      by the need to be able to encode the same instance data in both JSON
      and XML. These two exceptions are:
      <list style="symbols">
        <t>Leaf values encoded as strings may contain code points
        identifying Noncharacters that belong to the XML character set
        (see sec. 2.2 in <xref target="W3C.REC-xml-20081126"/>). This
        issue is likely to be solved in YANG 1.1 because noncharacters
        will not be allowed in string values, see sec. 9.4 in <xref
        target="I-D.ietf-netmod-rfc6020bis"/>.</t>
        <t>Values of the "binary" type are encoded with the base64
        encoding scheme (<xref target="sec.binary"/>), whereas I-JSON
        recommends base64url instead. Theoretically, values of the
        "binary" type might appear in URI references, such as
        Request-URI in RESTCONF, although in practice the cases where
        it is really needed should be extremely rare.</t>
      </list>
      </t>
    </section>

    <section anchor="sec.cons" title="Security Considerations">
      <t>This document defines an alternative encoding for data
      modeled in the YANG data modeling language. As such, it doesn't
      contribute any new security issues beyond those discussed in
      sec. 15 of <xref target="RFC6020"/>.</t>
      <t>JSON is rather different from XML, and JSON parsers may thus
      suffer from other types of vulnerabilities than their XML
      counterparts. To minimize these security risks, it is important
      that client and server software supporting JSON encoding behaves
      as required in sec. 3 of <xref
      target="I-D.ietf-json-i-json"/>. That is, received JSON data
      that violate any of I-JSON strict constraints MUST NOT be
      trusted nor acted upon. Violations due to the presence of
      Unicode Noncharacters in the data (see <xref
      target="sec.i-json"/>) SHOULD be carefully examined.</t>
    </section>

    <section anchor="sec.ack" title="Acknowledgments">
      <t>The author wishes to thank Andy Bierman, Martin Bjorklund,
      Dean Bogdanovic, Balazs Lengyel, Juergen Schoenwaelder and Phil
      Shafer for their helpful comments and suggestions.</t>
    </section>

  </middle>

  <back>
    
    <references title="Normative References">
      &I-D.ietf-json-i-json;
      &RFC7159;
      &RFC2119;
      &RFC6020;
      &RFC6241;
      &W3C.REC-xml-20081126;
    </references>

    <references title="Informative References">
      &RFC7223;
      &W3C.REC-xpath-19991116;
      &I-D.ietf-netconf-restconf;
      &I-D.ietf-netmod-rfc6020bis;
    </references>

    <section anchor="app.ex-if"
             title="A Complete Example">
      
      <t>The JSON document shown below represents the same data as the
      reply to the NETCONF &lt;get&gt; request appearing in Appendix D
      of <xref target="RFC7223"/>. The data model is a combination of
      two YANG modules: "ietf-interfaces" and "ex-vlan" (the latter is
      an example module from Appendix C of <xref
      target="RFC7223"/>). The "if-mib" feature defined in the
      "ietf-interfaces" module is considered to be active.</t>

      <figure>
        &ex-get-reply.json;
      </figure>

    </section>

    <section title="Change Log">

      &ed-hint-remove-sec;
      
      <section title="Changes Between Revisions -01 and -02">
        <t>
          <list style="symbols">
	    <t>Encoding of namespaces in instance-identifiers was changed.</t>
	    <t>Text specifying the order of array elements in
	    leaf-list and list instances was added.</t>
	  </list>
	</t>
      </section>
      
      <section title="Changes Between Revisions -00 and -01">
        <t>
          <list style="symbols">
	    <t>Metadata encoding was moved to a separate I-D,
	    draft-lhotka-netmod-yang-metadata.</t>
            <t>JSON encoding is now defined directly rather than via
            XML-JSON mapping.</t>
            <t>The rules for namespace encoding has changed. This
            affect both node instance names and
            instance-identifiers.</t>
            <t>I-JSON-related changes. The most significant is the
            string encoding of 64-bit numbers.</t>
            <t>When validating union type, the partial type info
            present in JSON encoding is taken into account.</t>
            <t>Added section about I-JSON compliance.</t>
            <t>Updated the example in appendix.</t>
            <t>Wrote Security Considerations.</t>
            <t>Removed IANA Considerations as there are none.</t>
          </list>
        </t>
      </section>

    </section>

  </back>

</rfc>
