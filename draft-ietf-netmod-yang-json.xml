<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM '.tools/schema/rfc2629.dtd' [
<!ENTITY % COMMON SYSTEM ".tools/bplate/common.ent">
%COMMON;
<!ENTITY % WG SYSTEM ".tools/bplate/ietf-wg.ent">
%WG;
<!ENTITY % stdrefs SYSTEM "stdrefs.ent">
%stdrefs;
<!ENTITY % figures SYSTEM "figures.ent">
%figures;
]>

<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std">

  <front>
    <title abbrev="JSON Encoding of YANG Data">JSON Encoding of Data
    Modeled with YANG</title>

    <author initials="L." surname="Lhotka" fullname="Ladislav Lhotka">
      <organization>CZ.NIC</organization>
      <address>
        <email>lhotka@nic.cz</email>
      </address>
    </author>
    <date day="23" month="September" year="2013"/>
    <area>Operations and Management</area>
    &netmod-wg;
    <abstract>
      <t>This document defines encoding rules for representing
      configuration, state data, RPC operation or action input and
      output parameters, and notifications defined using YANG as
      JavaScript Object Notation (JSON) text.</t>
    </abstract>
  </front>

  <middle>

    <section anchor="sec.introduction" title="Introduction">
      <t>The NETCONF protocol <xref target="RFC6241"/> uses XML <xref
      target="W3C.REC-xml-20081126"/> for encoding data in its Content
      Layer. Other management protocols might want to use other
      encodings while still benefiting from using YANG <xref
      target="I-D.ietf-netmod-rfc6020bis"/> as the data modeling
      language.</t>
      <t>For example, the RESTCONF protocol <xref
      target="I-D.ietf-netconf-restconf"/> supports two encodings: XML
      (media type "application/yang.data+xml") and JSON (media type
      "application/yang.data+json").</t>
      <t>The specification of YANG 1.1 data modelling language <xref
      target="I-D.ietf-netmod-rfc6020bis"/> defines only XML encoding
      for data instances, i.e., contents of configuration datastores,
      state data, RPC operation or action input and output parameters,
      and event notifications. The aim of this document is to define
      rules for encoding the same data as JavaScript Object Notation
      (JSON) text <xref target="RFC7159"/>.</t>
    </section>

    <section anchor="sec.term-not" title="Terminology and Notation">

      &kw-2119;

      <t>The following terms are defined in <xref
      target="I-D.ietf-netmod-rfc6020bis"/>:
      <list style="symbols">
        <t>action,</t>
        <t>anydata,</t>
        <t>anyxml,</t>
        <t>augment,</t>
        <t>container,</t>
        <t>data node,</t>
        <t>data tree,</t>
        <t>identity,</t>
        <t>instance identifier,</t>
        <t>leaf,</t>
        <t>leaf-list,</t>
        <t>list,</t>
        <t>module,</t>
        <t>RPC operation,</t>
        <t>submodule.</t>
      </list></t>

    </section>

    <section anchor="sec.properties"
             title="Properties of the JSON Encoding">
      <t>This document defines JSON encoding for YANG data trees and
      their subtrees. It is always assumed that the top-level
      structure in JSON-encoded data is an object.</t>
      <t>Instances of YANG data nodes (leafs, containers, leaf-lists,
      lists, anydata and anyxml nodes) are encoded as members of a
      JSON object, i.e., name/value pairs. <xref
      target="sec.names-ns"/> defines how the name part is formed, and
      the following sections deal with the value part.</t>
      <t>Unlike XML element content, JSON values carry partial type
      information (number, string, boolean). The JSON encoding is
      defined so that this information is never in conflict with the
      data type of the corresponding YANG leaf or leaf-list.</t>
      <t>With the exception of anyxml and schema-less anydata nodes,
      it is possible to map a JSON-encoded data tree to XML encoding
      as defined in <xref target="I-D.ietf-netmod-rfc6020bis"/>, and
      vice versa. However, such conversions require the YANG data
      model to be available.</t>
      <t>In order to achieve maximum interoperability while allowing
      implementations to use a variety of existing JSON parsers, the
      JSON encoding rules follow, as much as possible, the constraints
      of the I-JSON restricted profile <xref target="RFC7493"/>. <xref
      target="sec.i-json"/> discusses I-JSON conformance in more
      detail.</t>
    </section>

    <section anchor="sec.names-ns" title="Names and Namespaces">
      <t>An object member name MUST be in one of the following forms:
      <list style="symbols">
        <t>simple - identical to the identifier of the corresponding
        YANG data node;</t>
        <t>namespace-qualified - the data node identifier is prefixed
        with the name of the module in which the data node is defined,
        separated from the data node identifier by the colon character
        (":").</t>
      </list></t>
      <t>The name of a module determines the namespace of all data
      node names defined in that module. If a data node is defined in
      a submodule, then the namespace-qualified member name uses the
      name of the main module to which the submodule belongs.</t>
      <t>ABNF syntax <xref target="RFC5234"/> of a member name is
      shown in <xref target="fig.mname"/>, where the production for
      "identifier" is defined in sec. 13 of <xref
      target="I-D.ietf-netmod-rfc6020bis"/>.</t>

      <figure anchor="fig.mname"
              title="ABNF production for a JSON member name.">
        <artwork>
        <![CDATA[member-name = [identifier ":"] identifier]]>
        </artwork>
      </figure>

      <t>A namespace-qualified member name MUST be used for all
      members of a top-level JSON object, and then also whenever the
      namespaces of the data node and its parent node are
      different. In all other cases, the simple form of the member
      name MUST be used.</t>

      <t>For example, consider the following YANG module:
      <figure>
        &foomod.yang;
      </figure></t>
      <t>If the data model consists only of this module, then the
      following is a valid JSON-encoded configuration:
      <figure>
        <artwork>
<![CDATA[{
  "foomod:top": {
    "foo": 54
  }
}]]>
        </artwork>
      </figure>
      </t>
      <t>Note that the member of the top-level object uses the
      namespace-qualified name but the "foo" leaf doesn't because it
      is defined in the same module as its parent container "top".</t>
      <t>Now, assume the container "top" is augmented from another
      module, "barmod":
      <figure>
        &barmod.yang;
      </figure>
      </t>
      <t>A valid JSON-encoded configuration containing both leafs may
      then look like this:
      <figure>
        <artwork>
<![CDATA[{
  "foomod:top": {
    "foo": 54,
    "barmod:bar": true
  }
}]]>
        </artwork>
      </figure>
      </t>
      <t>The name of the "bar" leaf is prefixed with the namespace
      identifier because its parent is defined in a different
      module.</t>
      <t>Explicit namespace identifiers are sometimes needed when
      encoding values of the "identityref" and "instances-identifier"
      types. The same form of namespace-qualified name as defined
      above is then used. See Sections <xref format="counter"
      target="sec.idref"/> and <xref format="counter"
      target="sec.i-i"/> for details.</t>
    </section>

    <section anchor="sec.datanodes"
             title="Encoding of YANG Data Node Instances">

      <t>Every data node instance is encoded as a name/value pair
      where the name is formed from the data node identifier using the
      rules of <xref target="sec.names-ns"/>. The value depends on the
      category of the data node as explained in the following
      subsections.</t>
      <t>Character encoding MUST be UTF-8.</t>

      <section anchor="sec.leaf"
               title='The "leaf" Data Node'>

        <t>A leaf instance is encoded as a name/value pair where the
        value can be a string, number, literal "true" or "false", or
        the special array "[null]", depending on the type of the leaf
        (see <xref target="sec.datatypes"/> for the type encoding
        rules).</t>
        <t>Example: For the leaf node definition
        <figure>
          <artwork>
<![CDATA[leaf foo {
  type uint8;
}]]>
          </artwork>
        </figure>
        the following is a valid JSON-encoded instance:
        <figure>
          <artwork>
<![CDATA["foo": 123]]>
          </artwork>
        </figure>
        </t>

      </section>

      <section anchor="sec.container"
               title='The "container" Data Node'>

        <t>A container instance is encoded as a name/object pair. The
        container's child data nodes are encoded as members of the
        object.</t>
        <t>Example: For the container definition
        <figure>
          <artwork>
<![CDATA[container bar {
  leaf foo {
    type uint8;
  }
}]]>
          </artwork>
        </figure>
        the following is a valid JSON-encoded instance:
        <figure>
          <artwork>
<![CDATA["bar": {
  "foo": 123
}]]>
          </artwork>
        </figure>
        </t>
      </section>

      <section anchor="sec.leaf-list"
               title='The "leaf-list" Data Node'>

        <t>A leaf-list is encoded as a name/array pair, and the array
        elements are values of some scalar type, which can be a
        string, number, literal "true" or "false", or the special
        array "[null]", depending on the type of the leaf-list (see
        <xref target="sec.datatypes"/> for the type encoding
        rules).</t>
        <t>The ordering of array elements follows the same rules as
        the ordering of XML elements representing leaf-list entries in
        the XML encoding. Specifically, the "ordered-by" properties
        (sec. 7.7.7 in <xref target="I-D.ietf-netmod-rfc6020bis"/>)
        MUST be observed.</t>
        <t>Example: For the leaf-list definition
        <figure>
          <artwork>
<![CDATA[leaf-list foo {
  type uint8;
}]]>
          </artwork>
        </figure>
        the following is a valid JSON-encoded instance:
        <figure>
          <artwork>
<![CDATA["foo": [123, 0]]]>
          </artwork>
        </figure>
        </t>
      </section>

      <section anchor="sec.list"
               title='The "list" Data Node'>

        <t>A list instance is encoded as a name/array pair, and the
        array elements are JSON objects.</t>
        <t>The ordering of array elements follows the same rules as
        the ordering of XML elements representing list entries in the
        XML encoding. Specifically, the "ordered-by" properties
        (sec. 7.7.7 in <xref target="I-D.ietf-netmod-rfc6020bis"/>)
        MUST be observed.</t>
        <t>Unlike the XML encoding, where list keys are required to
        precede any other siblings within a list entry, and appear in
        the order specified by the data model, the order of members in
        a JSON-encoded list entry is arbitrary because JSON objects
        are fundamentally unordered collections of members.</t>
        <t>Example: For the list definition
        <figure>
          <artwork>
<![CDATA[list bar {
  key foo;
  leaf foo {
    type uint8;
  }
  leaf baz {
    type string;
  }
}]]>
          </artwork>
        </figure>
        the following is a valid JSON-encoded instance:
        <figure>
          <artwork>
<![CDATA["bar": [
  {
    "foo": 123,
    "baz": "zig"
  },
  {
    "baz": "zag",
    "foo": 0
  }
]]]>
          </artwork>
        </figure>

        </t>

      </section>

      <section anchor="sec.anydata"
               title='The "anydata" Data Node'>
        <t>Anydata data node serves as a container for an arbitrary
        set of nodes that otherwise appear as normal YANG-modeled
        data. A data model for anydata content may or may not be known
        at run time. In the latter case, converting JSON-encoded
        instances to the XML encoding defined in <xref
        target="I-D.ietf-netmod-rfc6020bis"/> may be impossible.</t>
        <t>An anydata instance is encoded in the same way as a
        container, i.e., as a value/object pair. The requirement that
        anydata content can be modeled by YANG implies the following
        rules for the JSON text inside the object:
        <list style="symbols">
          <t>It is valid I-JSON <xref target="RFC7493"/>.</t>
          <t>All object member names satisfy the ABNF production in
          <xref target="fig.mname"/>.</t>
          <t>Any JSON array contains either only unique scalar values
          (as a leaf-list, see <xref target="sec.leaf-list"/>), or
          only objects (as a list, see <xref target="sec.list"/>).</t>
          <t>The "null" value is only allowed in the single-element
          array "[null]" corresponding to the encoding of the "empty"
          type, see <xref target="sec.empty"/>.</t>
        </list></t>
        <t>Example: for the anydata definition
        <figure>
          <artwork>
<![CDATA[anydata data;]]>
          </artwork>
        </figure>
        the following is a valid JSON-encoded instance:
        <figure>
          <artwork>
<![CDATA["data": {
  "ietf-notification:notification": {
    "eventTime": "2014-07-29T13:43:01Z",
    "example-event:event": {
      "event-class": "fault",
      "reporting-entity": {
        "card": "Ethernet0"
      },
      "severity": "major"
    }
  }
}]]>
          </artwork>
        </figure>
        </t>
      </section>

      <section anchor="sec.anyxml"
               title='The "anyxml" Data Node'>
        <t>An anyxml instance is encoded as a JSON name/value pair.
        The value MUST satisfy I-JSON constraints.</t>
        <t>Example: For the anyxml definition
        <figure>
          <artwork>
<![CDATA[anyxml bar;]]>
          </artwork>
        </figure>
        the following is a valid JSON-encoded instance:
        <figure>
          <artwork>
<![CDATA["bar": [true, null, true]]]>
          </artwork>
        </figure>
        </t>
      </section>

      <section anchor="sec.meta"
               title="Metadata Objects">
        <t>Apart from instances of YANG data nodes, a JSON document
        MAY contain special object members whose name starts with the
        "@" character (COMMERCIAL AT). Such members are used for
        special purposes such as encoding metadata <xref
        target="I-D.ietf-netmod-yang-metadata"/>. Exact syntax and
        semantics of such members are outside the scope of this
        document.</t>
      </section>

    </section>

    <section anchor="sec.datatypes"
             title="Representing YANG Data Types in JSON Values">

      <t>The type of the JSON value in an instance of the leaf or
      leaf-list data node depends on the type of that data node as
      specified in the following subsections.</t>

      <section anchor="sec.numtypes" title="Numeric Types">
        <t>A value of the types "int8", "int16", "int32", "uint8",
        "uint16" and "uint32" is represented as a JSON number.</t>
        <t>A value of the "int64", "uint64" or "decimal64" type is
        represented as a JSON string whose content is the lexical
        representation of the corresponding YANG type as specified in
        sections 9.2.1 and 9.3.1 of <xref
        target="I-D.ietf-netmod-rfc6020bis"/>.</t>
        <t>For example, if the type of the leaf "foo" in <xref
        target="sec.leaf"/> was "uint64" instead of "uint8", the
        instance would have to be encoded as</t>
        <figure>
          <artwork>
<![CDATA["foo": "123"]]>
          </artwork>
        </figure>
        <t>The special handling of 64-bit numbers follows from the
        I-JSON recommendation to encode numbers exceeding the IEEE
        754-2008 double precision range as strings, see sec. 2.2 in
        <xref target="RFC7493"/>.</t>
      </section>

      <section anchor="sec.string" title='The "string" Type'>
        <t>A "string" value is represented as a JSON string, subject to
        JSON string encoding rules.</t>
      </section>

      <section anchor="sec.boolean" title='The "boolean" Type'>
        <t>A "boolean" value is represented as the corresponding JSON
        literal name "true" or "false".</t>
      </section>

      <section anchor="sec.enum" title='The "enumeration" Type'>
        <t>An "enumeration" value is represented as a JSON string -
        one of the names assigned by "enum" statements in YANG.</t>
        <t>The representation is identical to the lexical
        representation of the "enumeration" type in XML, see sec. 9.6
        in <xref target="I-D.ietf-netmod-rfc6020bis"/>.</t>
      </section>

      <section anchor="sec.bits" title='The "bits" Type'>
        <t>A "bits" value is represented as a JSON string - a
        space-separated sequence of names of bits that are set. The
        permitted bit names are assigned by "bit" statements in
        YANG.</t>
        <t>The representation is identical to the lexical
        representation of the "bits" type, see sec. 9.7 in <xref
        target="I-D.ietf-netmod-rfc6020bis"/>.</t>
      </section>

      <section anchor="sec.binary" title='The "binary" Type'>
        <t>A "binary" value is represented as a JSON string -
        base64-encoding of arbitrary binary data.</t>
        <t>The representation is identical to the lexical
        representation of the "binary" type in XML, see sec. 9.8 in
        <xref target="I-D.ietf-netmod-rfc6020bis"/>.</t>
      </section>

      <section anchor="sec.leafref" title='The "leafref" Type'>
        <t>A "leafref" value is represented using the same rules as
        the type of the leaf to which the leafref value refers.</t>
      </section>

      <section anchor="sec.idref" title='The "identityref" Type'>
        <t>An "identityref" value is represented as a string - the
        name of an identity. If the identity is defined in another
        module than the leaf node containing the identityref value,
        the namespace-qualified form (<xref target="sec.names-ns"/>)
        MUST be used. Otherwise, both the simple and
        namespace-qualified forms are permitted.</t>
        <t>For example, consider the following schematic module:</t>
        <figure>
          <artwork>
<![CDATA[module exmod {
  ...
  import ietf-interfaces {
    prefix if;
  }
  import iana-if-type {
    prefix ianaift;
  }
  ...
  leaf type {
    type identityref {
      base "if:interface-type";
    }
  }
}]]>
          </artwork>
        </figure>
        <t>A valid instance of the "type" leaf is then encoded as
        follows:
        <figure>
          <artwork>
<![CDATA["type": "iana-if-type:ethernetCsmacd"]]>
          </artwork>
        </figure>
        </t>
        <t>The namespace identifier "iana-if-type" must be present in
        this case because the "ethernetCsmacd" identity is not defined
        in the same module as the "type" leaf.</t>
      </section>

      <section anchor="sec.empty" title='The "empty" Type'>
        <t>An "empty" value is represented as "[null]", i.e., an array
        with the "null" literal being its only element. For the
        purposes of this document, "[null]" is considered an atomic
        scalar value.</t>
        <t>This encoding of the "empty" type was chosen instead of
        using simply "null" in order to facilitate the use of empty
        leafs in common programming languages where the "null" value of a
        member is treated as if the member is not present.</t>

        <t>Example: For the leaf definition
        <figure>
          <artwork>
<![CDATA[leaf foo {
  type empty;
}]]>
          </artwork>
        </figure>
        a valid instance is
        <figure>
          <artwork>
<![CDATA["foo": [null]]]>
          </artwork>
        </figure>
        </t>

      </section>

      <section anchor="sec.union" title='The "union" Type'>
        <t>A value of the "union" type is encoded as the value of any
        of the member types.</t>
        <t>When validating a value of the "union" type, the type
        information conveyed by the JSON encoding MUST also be taken
        into account. JSON syntax thus provides additional means for
        resolving union member type that are not available in XML
        encoding.</t>
        <t>For example, consider the following YANG definition:
        <figure>
          <artwork>
<![CDATA[leaf bar {
  type union {
    type uint16;
    type string;
  }
}]]>
          </artwork>
        </figure>
        In RESTCONF <xref target="I-D.ietf-netconf-restconf"/>, it is
        possible to set the value of "bar" in the following way when
        using the "application/yang.data+xml" media type:
        <figure>
          <artwork>
<![CDATA[<bar>13.5</bar>]]>
          </artwork>
        </figure>
        because the value may be interpreted as a string, i.e., the
        second member type of the union. When using the
        "application/yang.data+json" media type, however, this is an error:
        <figure>
          <artwork>
<![CDATA["bar": 13.5]]>
          </artwork>
        </figure>
        In this case, the JSON encoding indicates the value is
        supposed to be a number rather than a string, and it is not a
        valid "uint16" value.</t>
        <t>Conversely, the value of
        <figure>
          <artwork>
<![CDATA["bar": "1"]]>
          </artwork>
        </figure>
        is to be interpreted as a string.</t>
      </section>

      <section anchor="sec.i-i" title='The "instance-identifier" Type'>
        <t>An "instance-identifier" value is encoded as a string that
        is analogical to the lexical representation in XML encoding,
        see sec. 9.13.3 in <xref
        target="I-D.ietf-netmod-rfc6020bis"/>. However, the encoding
        of namespaces in instance-identifier values follows the rules
        stated in <xref target="sec.names-ns"/>, namely:
        <list style="symbols">
          <t>The leftmost (top-level) data node name is always in the
          namespace-qualified form.</t>
          <t>Any subsequent data node name is in the
          namespace-qualified form if the node is defined in another
          module than its parent node, and the simple form is used
          otherwise. This rule also holds for node names appearing in
          predicates.</t>
        </list></t>
        <t>For example,
        <figure>
          <artwork>
/ietf-interfaces:interfaces/interface[name='eth0']/ietf-ip:ipv4/ip
          </artwork>
        </figure>
        is a valid instance-identifer value because the data nodes
        "interfaces", "interface" and "name" are defined in the module
        "ietf-interfaces", whereas "ipv4" and "ip" are defined in
        "ietf-ip".</t>
      </section>

    </section>

    <section anchor="sec.i-json" title="I-JSON Compliance">
      <t>I-JSON <xref target="RFC7493"/> is a restricted profile of
      JSON that guarantees maximum interoperability for protocols that
      use JSON in their messages, no matter what JSON
      encoders/decoders are used in protocol implementations. The
      encoding defined in this document therefore observes the I-JSON
      requirements and recommendations as closely as possible.</t>
      <t>In particular, the following properties are guaranteed:
      <list style="symbols">
        <t>Character encoding is UTF-8.</t>
        <t>Member names within the same JSON object are always unique.</t>
        <t>The order of JSON object members is never relied upon.</t>
        <t>Numbers of any type supported by YANG can be exchanged
        reliably. See <xref target="sec.numtypes"/> for details.</t>
      </list>
      </t>
      <t>The JSON encoding defined in this document deviates from
      I-JSON only in the representation of the "binary" type. In order
      to remain compatible with XML encoding, the base64 encoding
      scheme is used (<xref target="sec.binary"/>), whilst I-JSON
      recommends base64url instead.</t>
    </section>

    <section anchor="sec.cons" title="Security Considerations">
      <t>This document defines an alternative encoding for data
      modeled in the YANG data modeling language. As such, it doesn't
      contribute any new security issues beyond those discussed in
      sec. 16 of <xref target="I-D.ietf-netmod-rfc6020bis"/>.</t>
      <t>JSON processing is rather different from XML, and JSON
      parsers may thus suffer from other types of vulnerabilities than
      their XML counterparts. To minimize these new security risks,
      software on the receiving side SHOULD reject all messages that
      do not comply to the rules of this document and reply with an
      appropriate error message to the sender.</t>
    </section>

    <section anchor="sec.ack" title="Acknowledgments">
      <t>The author wishes to thank Andy Bierman, Martin Bjorklund,
      Dean Bogdanovic, Balazs Lengyel, Juergen Schoenwaelder and Phil
      Shafer for their helpful comments and suggestions.</t>
    </section>

  </middle>

  <back>

    <references title="Normative References">
      &RFC7159;
      &RFC2119;
      &RFC5234;
      &I-D.ietf-netmod-rfc6020bis;
      &RFC6241;
      &RFC7493;
    </references>

    <references title="Informative References">
      &RFC7223;
      &I-D.ietf-netconf-restconf;
      &I-D.ietf-netmod-yang-metadata;
      &W3C.REC-xml-20081126;
    </references>

    <section anchor="app.ex-if"
             title="A Complete Example">

      <t>The JSON document shown below represents the same data as the
      reply to the NETCONF &lt;get&gt; request appearing in Appendix D
      of <xref target="RFC7223"/>. The data model is a combination of
      two YANG modules: "ietf-interfaces" and "ex-vlan" (the latter is
      an example module from Appendix C of <xref
      target="RFC7223"/>). The "if-mib" feature defined in the
      "ietf-interfaces" module is considered to be active.</t>

      <figure>
        &ex-get-reply.json;
      </figure>

    </section>

    <section title="Change Log">

      &ed-hint-remove-sec;

      <section title="Changes Between Revisions -05 and -06">
        <t>
          <list style="symbols">
            <t>General permit on object members whose names start with
            "@".</t>
          </list>
        </t>
      </section>

      <section title="Changes Between Revisions -05 and -06">
        <t>
          <list style="symbols">
            <t>More text and a new example about resolving union-type values.</t>
          </list>
        </t>
      </section>

      <section title="Changes Between Revisions -04 and -05">
        <t>
          <list style="symbols">
            <t>Removed section "Validation of JSON-encoded Instance
            Data" and other text about XML-JSON mapping.</t>
            <t>Added section "Properties of the JSON Encoding".</t>
          </list>
        </t>
      </section>

      <section title="Changes Between Revisions -03 and -04">
        <t>
          <list style="symbols">
            <t>I-D.ietf-netmod-rfc6020bis is used as a normative
            reference instead of RFC 6020.</t>
            <t>Removed noncharacters as an I-JSON issue because it
            doesn't exist in YANG 1.1.</t>
            <t>Section about anydata encoding was added.</t>
            <t>Require I-JSON for anyxml encoding.</t>
            <t>Use ABNF for defining qualified name.</t>
          </list>
        </t>
      </section>

      <section title="Changes Between Revisions -02 and -03">
        <t>
          <list style="symbols">
            <t>Namespace encoding is defined without using RFC 2119
            keywords.</t>
            <t>Specification for anyxml nodes was extended and
            clarified.</t>
            <t>Text about ordering of list entries was corrected.</t>
          </list>
        </t>
      </section>

      <section title="Changes Between Revisions -01 and -02">
        <t>
          <list style="symbols">
            <t>Encoding of namespaces in instance-identifiers was changed.</t>
            <t>Text specifying the order of array elements in
            leaf-list and list instances was added.</t>
          </list>
        </t>
      </section>

      <section title="Changes Between Revisions -00 and -01">
        <t>
          <list style="symbols">
            <t>Metadata encoding was moved to a separate I-D,
            draft-lhotka-netmod-yang-metadata.</t>
            <t>JSON encoding is now defined directly rather than via
            XML-JSON mapping.</t>
            <t>The rules for namespace encoding has changed. This
            affect both node instance names and
            instance-identifiers.</t>
            <t>I-JSON-related changes. The most significant is the
            string encoding of 64-bit numbers.</t>
            <t>When validating union type, the partial type info
            present in JSON encoding is taken into account.</t>
            <t>Added section about I-JSON compliance.</t>
            <t>Updated the example in appendix.</t>
            <t>Wrote Security Considerations.</t>
            <t>Removed IANA Considerations as there are none.</t>
          </list>
        </t>
      </section>

    </section>

  </back>

</rfc>
