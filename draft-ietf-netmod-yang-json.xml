<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM '.tools/schema/rfc2629.dtd' [
<!ENTITY % COMMON SYSTEM ".tools/bplate/common.ent">
%COMMON;
<!ENTITY % WG SYSTEM ".tools/bplate/netmod.ent">
%WG;
<!ENTITY % stdrefs SYSTEM "stdrefs.ent">
%stdrefs;
<!ENTITY % figures SYSTEM "figures.ent">
%figures;
]>

<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std">

<front>
  <title abbrev="JSON Encoding of YANG Data">JSON Encoding of Data
  Modeled with YANG</title>

  <author initials="L." surname="Lhotka" fullname="Ladislav Lhotka">
    <organization>CZ.NIC</organization>
    <address>
      <email>lhotka@nic.cz</email>
    </address>
  </author>
  <date day="23" month="September" year="2013"/>
  <area>Operations and Management</area>
  &wg;
  <abstract>
    <t>This document defines rules for representing configuration and
    state data defined using YANG as JavaScript Object Notation (JSON)
    text. It does so by specifying a procedure for translating the
    subset of YANG-compatible XML documents to JSON, and vice
    versa.</t>
  </abstract>
</front>

<middle>

  <section anchor="sec.introduction" title="Introduction">
    <t>The aim of this document is to define rules for representing
    configuration and state data defined using the YANG data modeling
    language <xref target="RFC6020"/> as JavaScript Object Notation
    (JSON) text <xref target="RFC7159"/>. The result can be
    potentially applied in two different ways:
    <list style="numbers">
      <t>JSON may be used instead of the standard XML <xref
      target="W3C.REC-xml-20081126"/> encoding in the context of the
      NETCONF protocol <xref target="RFC6241"/> and/or with existing
      data models expressed in YANG. An example application is the
      RESTCONF Protocol <xref
      target="I-D.ietf-netconf-restconf"/>.</t>
      <t>Other documents that choose JSON to represent structured data
      can use YANG for defining the data model, i.e., both syntactic
      and semantic constraints that the data have to satisfy.</t>
    </list></t>

    <t>JSON mapping rules could be specified in a similar way as the
    XML mapping rules in <xref target="RFC6020"/>. This would however
    require solving several problems. To begin with, YANG uses XPath
    <xref target="W3C.REC-xpath-19991116"/> quite extensively, but
    XPath is not defined for JSON and such a definition would be far
    from straightforward.</t>
    <t>In order to avoid these technical difficulties, this document
    employs an alternative approach: it defines a relatively simple
    procedure which allows for translating the subset of XML that can be
    modeled using YANG to JSON, and vice versa. Consequently,
    validation of a JSON text against a data model can done by
    translating the JSON text to XML, which is then validated
    according to the rules stated in <xref target="RFC6020"/>.</t>
    <t>The translation procedure is adapted to YANG specifics and
    requirements, namely:
    <list style="numbers">
      <t anchor="it.dmd">The translation is driven by a concrete YANG
      data model and uses information about data types to achieve
      better results than generic XML-JSON translation procedures.</t>
      <t>Various document types are supported, namely configuration
      data, configuration + state data, RPC input and output
      parameters, and notifications.</t>
      <t>XML namespaces specified in the data model are mapped to
      namespaces of JSON objects as specified below. However, explicit
      namespace identifiers are rarely needed in JSON text.</t>
      <t>Translation of XML attributes, comments and processing
      instructions is outside the scope of this document.</t>
    </list></t>
    <t>Item <xref format="counter" target="it.dmd"/> above also means
    that, depending on the data model, the same XML element can be
    translated to different JSON objects. For example,

      <figure>
        <artwork>
    <![CDATA[<foo>123</foo>]]>
	</artwork>
      </figure>

    is translated to

      <figure>
        <artwork>
    <![CDATA["foo": 123]]>
	</artwork>
      </figure>

    if the "foo" node is defined as a leaf with the "uint8"
    datatype, or to

      <figure>
        <artwork>
    <![CDATA["foo": ["123"]]]>
	</artwork>
      </figure>

    if the "foo" node is defined as a leaf-list with the "string"
    datatype, and the &lt;foo&gt; element has no siblings of the
    same name.</t>
    <t>In order to increase interoperability, JSON text resulting from
    the translation procedure satisfies all required constraints of
    the I-JSON restricted profile <xref
    target="I-D.ietf-json-i-json"/>. Where possible, recommended
    I-JSON constraints are also followed.</t>
  </section>

  <section anchor="sec.term-not" title="Terminology and Notation">
    
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
    in this document are to be interpreted as described in <xref
    target="RFC2119"/>.</t>

    <t>The following terms are defined in <xref target="RFC6020"/>:
    <list style="symbols">
      <t>anyxml</t>
      <t>augment</t>
      <t>container</t>
      <t>data node</t>
      <t>data tree</t>
      <t>datatype</t>
      <t>feature</t>
      <t>identity</t>
      <t>instance identifier</t>
      <t>leaf</t>
      <t>leaf-list</t>
      <t>list</t>
      <t>module</t>
      <t>submodule</t>
    </list></t>

    <t>The following terms are defined in <xref target="W3C.REC-xml-names-20091208"/>:
    <list style="symbols">
      <t>local name</t>
      <t>prefixed name</t>
      <t>qualified name</t>
    </list></t>

  </section>

  <section anchor="sec.specification"
           title="Specification of the Translation Procedure">
    <t>The translation procedure defines a 1-1 correspondence
    between the subset of YANG-compatible XML documents and JSON
    text. This means that the translation can be applied in both
    directions and it is always invertible.</t>
    <t>The translation procedure is applicable only to data
    hierarchies that are modelled by a YANG data model. An input XML
    document MAY contain enclosing elements representing NETCONF
    "Operations" and "Messages" layers. However, these enclosing
    elements do not appear in the resulting JSON document.</t>
    <t>Any YANG-compatible XML document can be translated, except
    documents with mixed content. This is only a minor limitation
    since mixed content is marginal in YANG - it is allowed only in
    anyxml data nodes.</t>
    <t>The following sections specify rules mainly for translating
    XML documents to JSON text. Rules for the inverse translation are
    stated only where necessary, otherwise they can be easily
    inferred.</t>
    <t>REQUIRED parameters of the translation procedure are:
    <list style="symbols">
      <t>YANG data model consisting of a set of YANG modules,</t>
      <t>type of the input document,</t>
      <t>optional features (defined via the "feature" statement) that
      are considered active.</t>
    </list></t>
    <t>The permissible types of input documents are listed in <xref
    target="tab.doctypes"/> together with the corresponding part of
    the data model that is used for the translation.</t>

    <texttable anchor="tab.doctypes"
               title="YANG Document Types">
      <ttcol>Document Type</ttcol>
      <ttcol>Data Model Section</ttcol>
      <c>configuration and state data</c><c>main data tree</c>
      <c>configuration</c><c>main data tree ("config true")</c>
      <c>RPC input parameters</c><c>"input" data nodes under "rpc"</c>
      <c>RPC output parameters</c><c>"output" data nodes under "rpc"</c>
      <c>notification</c><c>"notification" data nodes</c>
    </texttable>

    <t>When translating XML to JSON, the type of the input document
    can often be determined form the encapsulating elements belonging
    to the "Operations" or "Messages" layer as defined by the NETCONF
    protocol (see Sec. 1.2 in <xref target="RFC6241"/>).</t>

    <t>A particular application MAY decide to support only a subset of
    document types from <xref target="tab.doctypes"/>.</t>

    <t>XML documents can be translated to JSON text only if they are
    valid instances of the YANG data model and selected document type,
    also taking into account the active features, if there are
    any.</t>

    <t>The resulting JSON document is always a single
    object (<xref target="RFC7159"/>, Sec. 4) whose members are
    translated from the original XML document using the rules
    specified in the following sections.</t>

    <section anchor="sec.names-ns" title="Names and Namespaces">
      <t>The local part of a JSON name is always identical to the
      local name of the corresponding XML element.</t>
      <t>Each JSON name lives in a namespace which is uniquely
      identified by the name of the YANG module where the
      corresponding data node is defined. If the data node is defined
      in a submodule, then the namespace identifier is the name of the
      main module to which the submodule belongs. The translation
      procedure MUST correctly map YANG namespace URIs to YANG module
      names and vice versa.</t>
      <t>The namespace SHALL be expressed in JSON text by prefixing
      the local name in the following way:</t>

      <figure anchor="fig.ns-enc"
              title="Encoding a namespace identifier with a local name.">
        <artwork>
        <![CDATA[<module name>:<local name>]]>
	</artwork>
      </figure>

      <t>Explicit namespace identifiers MUST be used for all
      members of the top-level YANG nodes, and also for all nodes
      whose parent node is in a different namespace. Otherwise, explicit
      namespace identifiers MUST NOT be used.</t>
      <t>For example, consider the following YANG module:
      <figure>
	&foomod.yang;
      </figure></t>
      <t>If the data model consists only of this module, then the
      following is a valid JSON document:
      <figure>
        <artwork>
    <![CDATA[{
      "foo": {
        "bar": true
      }
    }]]>
        </artwork>
      </figure>
      </t>
      <t>Now, assume the container "foo" is augmented from another
      module:
      <figure>
        <artwork>
    <![CDATA[module barmod {
        namespace "http://example.com/barmod";
        prefix "bm";
        import foomod {
            prefix fm;
        }
        augment "/fm:foo" {
            leaf bar {
                type uint8;
            }
        }
    }]]>
        </artwork>
      </figure>
      </t>
      <t>In the data model combining "foomod" and "barmod", we have
      two sibling data nodes with the same local name, namely "bar". In
      this case, a valid JSON document has to specify an explicit
      namespace identifier (module name) for both leaves:
      <figure>
        <artwork>
    <![CDATA[{
      "foo": {
        "foomod:bar": true,
        "barmod:bar": 123
      }
    }]]>
        </artwork>
      </figure>
      </t>

    </section>

    <section anchor="sec.elements"
             title="Mapping XML Elements to JSON Objects">

      <t>An XML element that is modelled as a YANG data node is
      translated to a name/value pair where the name is formed from
      the name of the XML element using the rules in <xref
      target="sec.names-ns"/>. The value depends on the type of the
      data node as specified in the following sections.</t>

      <section anchor="sec.leaf"
               title='The "leaf" Data Node'>

        <t>An XML element that is modeled as YANG leaf is translated
        to a name/value pair and the type of the value is derived from
        the YANG datatype of the leaf (see <xref
        target="sec.datatypes"/> for the datatype mapping rules).</t>

        <t>Example: For the leaf node definition
        <figure>
          <artwork>
    <![CDATA[leaf foo {
        type uint8;
    }]]>
          </artwork>
        </figure>
        the XML element
        <figure>
          <artwork>
    <![CDATA[<foo>123</foo>]]>
          </artwork>
        </figure>
        corresponds to the JSON name/value pair
        <figure>
          <artwork>
    <![CDATA["foo": 123]]>
          </artwork>
        </figure>
        </t>

      </section>

      <section anchor="sec.container"
               title='The "container" Data Node'>

        <t>An XML element that is modeled as YANG container is
        translated to a name/object pair.</t>
        <t>Example: For the container definition
        <figure>
          <artwork>
    <![CDATA[container bar {
        leaf foo {
            type uint8;
        }
    }]]>
          </artwork>
        </figure>
        the XML element
        <figure>
          <artwork>
    <![CDATA[<bar>
      <foo>123</foo>
    </bar>]]>
          </artwork>
        </figure>
        corresponds to the JSON name/value pair
        <figure>
          <artwork>
    <![CDATA["bar": {
      "foo": 123
    }]]>
          </artwork>
        </figure>
        </t>
      </section>

      <section anchor="sec.leaf-list"
               title='The "leaf-list" Data Node'>

        <t>A sequence of one or more sibling XML elements with the
        same qualified name that is modeled as YANG leaf-list is
        translated to a name/array pair, and the array elements are
        primitive values whose type depends on the datatype of the
        leaf-list (see <xref target="sec.datatypes"/>).</t>
        <t>Example: For the leaf-list definition
        <figure>
          <artwork>
    <![CDATA[leaf-list foo {
        type uint8;
    }]]>
          </artwork>
        </figure>
        the XML elements
        <figure>
          <artwork>
    <![CDATA[<foo>123</foo>
    <foo>0</foo]]>
          </artwork>
        </figure>
        correspond to the JSON name/value pair
        <figure>
          <artwork>
    <![CDATA["foo": [123, 0]]]>
          </artwork>
        </figure>
        </t>

      </section>

      <section anchor="sec.list"
               title='The "list" Data Node'>
      
        <t>A sequence of one or more sibling XML elements with the
        same qualified name that is modeled as YANG list is translated
        to a name/array pair, and the array elements are JSON
        objects.</t>
	<t>Unlike the XML encoding, where the list keys are
        required to come before any other siblings, and in the order
        specified by the data model, the order of members within a
        JSON list entry is arbitrary, because JSON objects are
        fundamentally unordered collections of members.</t>
        <t>Example: For the list definition
        <figure>
          <artwork>
    <![CDATA[list bar {
        key foo;
        leaf foo {
            type uint8;
        }
        leaf baz {
            type string;
        }
    }]]>
          </artwork>
        </figure>
        the XML elements
        <figure>
          <artwork>
    <![CDATA[<bar>
      <foo>123</foo>
      <baz>zig</baz>
    </bar>
    <bar>
      <foo>0</foo>
      <baz>zag</baz>
    </bar>]]>
          </artwork>
        </figure>
        correspond to the JSON name/value pair
        <figure>
          <artwork>
    <![CDATA["bar": [
      {
        "foo": 123,
        "baz": "zig"
      },
      {
        "foo": 0,
        "baz": "zag"
      }
    ]]]>
          </artwork>
        </figure>
        </t>

      </section>
      <section anchor="sec.anyxml"
               title='The "anyxml" Data Node'>
        <t>An XML element that is modeled as a YANG anyxml data node is
        translated to a name/object pair. The content of such an element is
        not modelled by YANG, and there may not be a straightforward
        mapping to JSON text (e.g., if it is a mixed XML
        content). Therefore, translation of anyxml contents is
        necessarily application-specific and outside the scope of this
        document.</t>
        <t>Example: For the anyxml definition
        <figure>
          <artwork>
    <![CDATA[anyxml bar;]]>
          </artwork>
        </figure>
        the XML element
        <figure>
          <artwork>
    <![CDATA[<bar>
      <p xmlns="http://www.w3.org/1999/xhtml">
        This is <em>very</em> cool.
      </p>
    </bar>]]>
          </artwork>
        </figure>
        may be translated to the following JSON name/value pair:
        <figure>
          <artwork>
    <![CDATA[{
      "bar": {
        "p": "This is *very* cool."
      }
    }]]>
          </artwork>
        </figure>
        </t>
      </section>

    </section>

    <section anchor="sec.datatypes"
             title="Mapping YANG Datatypes to JSON Values">

      <section anchor="sec.numtypes" title="Numeric Datatypes">
        <t>A value of one of the YANG numeric datatypes ("int8",
        "int16", "int32", "int64", "uint8", "uint16", "uint32",
        "uint64" and "decimal64") is mapped to a JSON number using the
        same lexical representation.</t>
      </section>

      <section anchor="sec.string" title='The "string" Type'>
        <t>A "string" value is mapped to an identical JSON string, subject
        to JSON encoding rules.</t>
      </section>

      <section anchor="sec.boolean" title='The "boolean" Type'>
        <t>A "boolean" value is mapped to the corresponding JSON value
        'true' or 'false'.</t>
      </section>

      <section anchor="sec.enum" title='The "enumeration" Type'>
        <t>An "enumeration" value is mapped in the same way as a string
        except that the permitted values are defined by "enum"
        statements in YANG.</t>
      </section>

      <section anchor="sec.bits" title='The "bits" Type'>
        <t>A "bits" value is mapped to a string identical to the lexical
        representation of this value in XML, i.e., space-separated
        names representing the individual bit values that are set.</t>
      </section>

      <section anchor="sec.binary" title='The "binary" Type'>
        <t>A "binary" value is mapped to a JSON string identical to the
        lexical representation of this value in XML, i.e.,
        base64-encoded binary data.</t> 
      </section>

      <section anchor="sec.leafref" title='The "leafref" Type'>
        <t>A "leafref" value is mapped according to the same rules as
        the type of the leaf being referred to.</t>
      </section>

      <section anchor="sec.idref" title='The "identityref" Type'>
        <t>An "identityref" value is mapped to a string representing the
        qualified name of the identity. Its namespace MAY be expressed
        as shown in <xref target="fig.ns-enc"/>. If the namespace part
        is not present, the namespace of the name of the JSON object
        containing the value is assumed.</t>
      </section>

      <section anchor="sec.empty" title='The "empty" Type'>
        <t>An "empty" value is mapped to '[null]', i.e., an array with
        the 'null' value being its only element.</t>
        <t>This encoding was chosen instead of using simply 'null' in
        order to facilitate the use of empty leafs in common
        programming languages. When used in a boolean context, the
        '[null]' value, unlike 'null', evaluates to 'true'.</t>

        <t>Example: For the leaf definition
        <figure>
          <artwork>
    <![CDATA[leaf foo {
        type empty;
    }]]>
          </artwork>
        </figure>
        the XML element
        <figure>
          <artwork>
    <![CDATA[<foo/>]]>
          </artwork>
        </figure>
        corresponds to the JSON name/value pair
        <figure>
          <artwork>
    <![CDATA["foo": [null]]]>
          </artwork>
        </figure>
        </t>

      </section>

      <section anchor="sec.union" title='The "union" Type'>
        <t>YANG "union" type represents a choice among multiple
        alternative types. The actual type of the XML value MUST be
        determined using the procedure specified in Sec. 9.12 of <xref
        target="RFC6020"/> and the mapping rules for that type are
        used.</t>
        <t>For example, consider the following YANG definition:

        <figure>
          <artwork>
    leaf-list bar {
        type union {
            type uint16;
            type string;
        }
    }
          </artwork>
        </figure>

        The sequence of three XML elements

        <figure>
          <artwork>
    &lt;bar&gt;6378&lt;/bar&gt;
    &lt;bar&gt;14.5&lt;/bar&gt;
    &lt;bar&gt;infinity&lt;/bar&gt;
          </artwork>
        </figure>

        will then be translated to this name/array pair:

        <figure>
          <artwork>
    "bar": [6378, "14.5", "infinity"]
          </artwork>
        </figure>
        </t>
      </section>

      <section anchor="sec.i-i" title='The "instance-identifier" Type'>
        <t>An "instance-identifier" value is a string representing a
        simplified XPath specification. It is mapped to an analogical
        JSON string in which all occurrences of XML namespace prefixes are
        either removed or replaced with the corresponding module name
        according to the rules of <xref target="sec.names-ns"/>.</t>
        <t>When translating such a value from JSON to XML, all
        components of the instance-identifier MUST be given
        appropriate XML namespace prefixes. It is RECOMMENDED that
        these prefixes be those defined via the "prefix" statement in
        the corresponding YANG modules.</t>
	<t>For example, assume "ex" is the prefix defined for the
	"example" module. Then the XML-encoded instance identifier
        <figure>
          <artwork>
    /ex:system/ex:user[ex:name='fred']
          </artwork>
        </figure>
	corresponds to the following JSON-encoded instance identifier:
        <figure>
          <artwork>
    /example:system/example:user[example:name='fred']
          </artwork>
        </figure>
	or simply
        <figure>
          <artwork>
    /system/user[name='fred']
          </artwork>
        </figure>
	if the local names of the data nodes "system", "user" and
	"name" are unambiguous.
	</t>
      </section>

    </section>
  </section>

  <section anchor="sec.iana" title="IANA Considerations">
    <t>TBD - register application/yang.data+json media type?</t>
  </section>

  <section anchor="sec.cons" title="Security Considerations">
    <t>TBD.</t>
  </section>

  <section anchor="sec.ack" title="Acknowledgments">
    <t>The author wishes to thank Andy Bierman, Martin Bjorklund,
    Juergen Schoenwaelder and Phil Shafer for their helpful comments
    and suggestions.</t>
  </section>

</middle>

<back>
  
  <references title="Normative References">
    &I-D.ietf-json-i-json;
    &RFC7159;
    &RFC2119;
    &RFC6020;
    &RFC6241;
    &W3C.REC-xml-20081126;
    &W3C.REC-xml-names-20091208;
  </references>

  <references title="Informative References">
    &RFC7223;
    &W3C.REC-xpath-19991116;
    &I-D.ietf-netconf-restconf;
  </references>

  <section anchor="app.ex-if"
	   title="A Complete Example">
    
    <t>The JSON document shown below was translated from a reply to
    the NETCONF &lt;get&gt; request that can be found in Appendix D of
    <xref target="RFC7223"/>. The data model is a combination of two
    YANG modules: "ietf-interfaces" and "ex-vlan" (the latter is an
    example module from Appendix C of <xref target="RFC7223"/>). The
    "if-mib" feature defined in the "ietf-interfaces" module is
    considered to be active.</t>

    <figure>
      &ex-get-reply.json;
    </figure>

  </section> 

</back>

</rfc>
